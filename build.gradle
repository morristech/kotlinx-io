buildscript {
    repositories {
        if (kotlin_version.contains("eap") || kotlin_version.contains("-rc-")) {
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        }
        if (kotlin_version.contains("dev")) {
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }

        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.25"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'kotlin-platform-common'

allprojects {
    if (project.hasProperty('releaseVersion')) {
        project.version = project.releaseVersion
    }

    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply from: rootProject.file('pom.gradle')
    apply from: rootProject.file('bintray.gradle')

    repositories {
        if (kotlin_version.contains("eap") || kotlin_version.contains("-rc-")) {
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.1' }
            maven {     url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        }
        if (kotlin_version.contains("dev")) {
            maven { url 'http://dl.bintray.com/kotlin/kotlin-dev' }
        }
        mavenCentral()
        mavenLocal()
    }

    afterEvaluate {
        task sourceJar(type: Jar, dependsOn: classes) {
            classifier 'sources'
            from sourceSets.main.kotlin
            duplicatesStrategy DuplicatesStrategy.EXCLUDE
            def platformSrc = sourceSets.main.allSource
            def commonSrc = project(':').sourceSets.main.allSource
            from (platformSrc + commonSrc)
        }
    }

    task emptyJar(type: Jar) {
        classifier 'javadoc'
    }

    tasks.build.dependsOn(['sourceJar', 'emptyJar'])

    publishing {
        publications {
            mavenProject(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version project.version

                artifact sourceJar {
                    classifier 'sources'
                }

                artifact emptyJar {
                    classifier 'javadoc'
                }

                withPom(pom)
            }
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

    testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
}

afterReleaseBuild.dependsOn bintrayUpload
